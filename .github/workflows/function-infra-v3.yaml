name: FunctionInfra-V3
## add CLI alternatives.
on:
  workflow_dispatch:
    inputs:
      functionName:
        description: 'name of function'
        default: 'function name'
        required: true
        type: string

      env:
        description: 'Target environment'
        default: 'sandbox'
        required: true
        type: string

permissions:
  id-token: write
  contents: read

env:
  FUNCTIONAPP_PATH: './apis' ##Change this to ./${{inputs.functionName}}
  DOTNET_VERSION: '6.0.x'

jobs:
  env-deploy:
    runs-on: ubuntu-latest ## SNGitHubRunner-Linux
    outputs:
      publish-profile: ${{ steps.publish-profile.outputs.PUBLISH_PROFILE }}
      app-name: ${{steps.app-name.outputs.APP_NAME}}
      sf-name: ${{steps.sf-name.outputs.SF_NAME}}
      app-oid: ${{steps.app-oid.outputs.APP_OID}}
    steps:
      - name: 'Checkout GitHub'
        uses: actions/checkout@v3

      - name: 'Az Login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: 'Strip Function Name'
        id: sf-name
        run: |
          echo 'SF_NAME<<SF' >> $GITHUB_OUTPUT
          echo ${{inputs.functionName}} | sed s/[.]//g >> $GITHUB_OUTPUT
          echo 'SF' >> $GITHUB_OUTPUT

      - name: 'Set App Name'
        id: app-name
        run: |
          echo 'APP_NAME<<APP' >> $GITHUB_OUTPUT
          echo 'func-'${{inputs.functionName}} | sed s/[.]//g >> $GITHUB_OUTPUT
          echo 'APP' >> $GITHUB_OUTPUT
          
      - name: 'Set RG Name'
        id: rg-name
        run: |
          echo 'RG_NAME<<RG' >> $GITHUB_OUTPUT
          echo 'rg-'${{inputs.functionName}}'-cus' | sed s/[.]//g >> $GITHUB_OUTPUT
          echo 'RG' >> $GITHUB_OUTPUT

      - name: 'Set KV Name'
        id: kv-name
        run: |
          echo 'KV_NAME<<KV' >> $GITHUB_OUTPUT
          echo 'kv-'${{inputs.functionName}} | sed s/[.]//g >> $GITHUB_OUTPUT
          echo 'KV' >> $GITHUB_OUTPUT

      - name: 'Deploy Infra'
        uses: azure/arm-deploy@v1
        with:
          deploymentName: ${{ github.run_number }}
          scope: subscription
          region: westus
          template: ./deploy/function-app-infra.bicep
          parameters: appName=${{steps.sf-name.outputs.SF_NAME}} env=${{inputs.env}} tenantId=${{ secrets.AZURE_TENANT_ID }}

      - name: 'Get Publish Profile'
        id: publish-profile
        run: |
          echo 'PUBLISH_PROFILE<<EOF' >> $GITHUB_OUTPUT
          az functionapp deployment list-publishing-profiles --name ${{ steps.app-name.outputs.APP_NAME }} --resource-group ${{ steps.rg-name.outputs.RG_NAME }} --xml >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: 'Get App Object ID'
        id: app-oid
        run: |
          echo 'APP_OID<<OID' >> $GITHUB_OUTPUT
          az functionapp show --name ${{ steps.app-name.outputs.APP_NAME }} --resource-group ${{ steps.rg-name.outputs.RG_NAME }} --query principalId >> $GITHUB_OUTPUT
          echo 'OID' >> $GITHUB_OUTPUT

      - name: 'Update KeyVault'
        run: |
          az keyvault set-policy --name ${{ steps.kv-name.outputs.KV_NAME }} --object-id ${{ steps.app-oid.outputs.APP_OID }} --secret-permissions {get, list} --key-permissions {get, list}

          

  # app-build-and-deploy:
  #   needs: env-deploy
  #   runs-on: windows-latest ## SNGitHubRunner
  #   environment: dev
  #   steps:
  #   - name: 'Checkout GitHub Action'
  #     uses: actions/checkout@v3

  #   - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
  #     uses: actions/setup-dotnet@v3
  #     with:
  #       dotnet-version: ${{ env.DOTNET_VERSION }}

  #   - name: 'Resolve Project Dependencies Using Dotnet'
  #     shell: pwsh
  #     run: |
  #       pushd './${{ env.FUNCTIONAPP_PATH }}'
  #       dotnet build --configuration Release --output ./output
  #       popd


  #   - name: 'Run Azure Functions Action'
  #     uses: Azure/functions-action@v1
  #     id: fa
  #     with:
  #       app-name: ${{ needs.env-deploy.outputs.app-name }}
  #       package: './apis/output' ## ${{inputs.functionName}}
  #       publish-profile: ${{ needs.env-deploy.outputs.publish-profile }}

  # update-apim:
  #   runs-on: ubuntu-latest ## SNGitHubRunner-Linux
  #   needs: [env-deploy, app-build-and-deploy]
  #   steps:
  #     - name: 'Az Login'
  #       uses: azure/login@v1
  #       with:
  #         client-id: ${{ secrets.AZURE_CLIENT_ID }}
  #         tenant-id: ${{ secrets.AZURE_TENANT_ID }}
  #         subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
  #     - name: 'Update APIM'
  #       uses: azure/CLI@v1
  #       with:
  #         azcliversion: 2.40.0
  #         ## Chage -g ${{ env.RG_NAME }}
  #         inlinescript: |
  #           az apim api import -g apim-test --service-name jake-test-apim --path ${{needs.env-deploy.outputs.app-name}} --display-name ${{needs.env-deploy.outputs.app-name}} \
  #           --specification-url "https://${{needs.env-deploy.outputs.app-name}}.azurewebsites.net/api/swagger.json" --specification-format OpenApiJson